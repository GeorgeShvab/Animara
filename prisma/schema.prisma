generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Character {
  id              Int      @id @unique @default(autoincrement())
  name            String?
  image           String?
  voiceActorName  String?
  voiceActorImage String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  anime           Anime    @relation(fields: [animeId], references: [id])
  animeId         Int
}

model ArtWork {
  id         Int      @id @unique @default(autoincrement())
  img        String
  type       String
  providerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  anime      Anime    @relation(fields: [animeId], references: [id])
  animeId    Int
}

model Genre {
  id          String   @id @unique()
  title       String
  image       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  animes      Anime[]
}

model Episode {
  id          Int      @id @unique @default(autoincrement())
  img         String[]
  title       String
  description String?
  rating      Int?
  number      Int
  isFiller    Boolean
  animeId     Int
  anime       Anime    @relation(fields: [animeId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sources     Source[]
  providers   Json
}

model Source {
  id         Int      @id @unique @default(autoincrement())
  episodeId  Int
  providerId String
  sources    Json[]
  subtitles  Json[]
  intro      Json?
  outro      Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  episode    Episode  @relation(fields: [episodeId], references: [id])
}

model Mapping {
  id              Int      @id @unique @default(autoincrement())
  providerAnimeId String
  providerId      String
  similarity      Int
  providerType    String
  animeId         Int
  anime           Anime    @relation(fields: [animeId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model AnimeRelation {
  id        Int      @id @unique @default(autoincrement())
  anime1Id  Int
  anime2Id  Int
  type      String
  anime1    Anime    @relation("relatedAnime", fields: [anime1Id], references: [id])
  anime2    Anime    @relation("relatedForAnime", fields: [anime2Id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id         String   @id @unique
  title      String
  number     Int
  rating     Int?
  updatedAt  DateTime
  mixdrop    String?
  providerId String
  createdAt  DateTime @default(now())
}

model Anime {
  id                 Int             @id @unique
  slug               String
  coverImage         String
  bannerImage        String
  trailer            String?
  status             String?
  season             String
  title              Json
  currentEpisode     Int?
  mappings           Mapping[]
  synonyms           String[]
  country            String?
  description        String
  duration           Int?
  color              String?
  year               Int?
  rating             Json
  popularity         Json
  format             String
  relatedForAnime    AnimeRelation[] @relation("relatedForAnime")
  relatedAnime       AnimeRelation[] @relation("relatedAnime")
  characters         Character[]
  totalEpisodes      Int?
  tags               String[]
  latestEpisodeTitle String?
  latestEpisode      Int?
  averageRating      Int
  averagePopularity  Int
  artworks           ArtWork[]
  relationType       String?
  episodes           Episode[]
  genres             Genre[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}
